{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\sato2\\\\OneDrive\\\\\\u30C9\\u30AD\\u30E5\\u30E1\\u30F3\\u30C8\\\\soundserver\\\\client\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useRef } from \"react\";\nimport io from \"socket.io-client\";\nimport \"./App.css\";\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst socket = io(\"http://192.168.10.2:3001\");\nconst playlog = [];\n// 各音楽の再生位置を保存\nconst audioPositions = {\n  0: 0,\n  1: 0,\n  2: 0\n};\n\n// 音楽リストの定義\nconst MUSIC_LISTS = {\n  0: [{\n    audio: \"/くるみ.mp3\",\n    image: \"/number5.jpg\"\n  }, {\n    audio: \"/アリア.mp3\",\n    image: \"/表示画像6.jpg\"\n  }, {\n    audio: \"/gline.mp3\",\n    image: \"/jupitor.jpg\"\n  }],\n  1: [{\n    audio: \"/アリア.mp3\",\n    image: \"/表示画像6.jpg\"\n  }, {\n    audio: \"/gline.mp3\",\n    image: \"/jupitor.jpg\"\n  }, {\n    audio: \"/くるみ.mp3\",\n    image: \"/number5.jpg\"\n  }],\n  2: [{\n    audio: \"/gline.mp3\",\n    image: \"/jupitor.jpg\"\n  }, {\n    audio: \"/くるみ.mp3\",\n    image: \"/number5.jpg\"\n  }, {\n    audio: \"/アリア.mp3\",\n    image: \"/表示画像6.jpg\"\n  }]\n};\n\n// 音量の統一設定\nconst NORMALIZED_VOLUME = 0.5;\nfunction App() {\n  _s();\n  const [currentImage, setCurrentImage] = useState(\"\");\n  const [currentAudio, setCurrentAudio] = useState(\"\");\n  const [playing, setPlaying] = useState(false);\n  const [currentMusicId, setCurrentMusicId] = useState(null);\n  const [currentPlaylistIndex, setCurrentPlaylistIndex] = useState(0);\n  const [currentTime, setCurrentTime] = useState(0);\n  const [duration, setDuration] = useState(0);\n  const audioRef = useRef(null);\n  const formatTime = timeInSeconds => {\n    const minutes = Math.floor(timeInSeconds / 60);\n    const seconds = Math.floor(timeInSeconds % 60);\n    return `${minutes}:${seconds.toString().padStart(2, '0')}`;\n  };\n  const handleTimeUpdate = () => {\n    if (audioRef.current) {\n      setCurrentTime(audioRef.current.currentTime);\n    }\n  };\n  const handleLoadedMetadata = () => {\n    if (audioRef.current) {\n      setDuration(audioRef.current.duration);\n      audioRef.current.currentTime = audioPositions[currentMusicId] || 0;\n      audioRef.current.play().catch(error => {\n        console.error(\"Failed to play audio:\", error);\n      });\n    }\n  };\n  function playNextInPlaylist(data) {\n    const playlist = MUSIC_LISTS[data];\n    const currentTrack = playlist[currentPlaylistIndex];\n    if (audioRef.current) {\n      audioPositions[currentMusicId] = audioRef.current.currentTime;\n      audioRef.current.pause();\n    }\n    setCurrentImage(currentTrack.image);\n    setCurrentAudio(currentTrack.audio);\n    setCurrentMusicId(data);\n    setPlaying(true);\n\n    // 次の曲のインデックスを設定（プレイリストの最後なら最初に戻る）\n    setCurrentPlaylistIndex(prevIndex => prevIndex + 1 >= playlist.length ? 0 : prevIndex + 1);\n  }\n  useEffect(() => {\n    socket.on(\"connect\", () => {\n      console.log(\"Connected to server\");\n    });\n    socket.on(\"connect_error\", error => {\n      console.error(\"Failed to connect to server\", error);\n    });\n    socket.on(\"data\", data => {\n      if (playlog.length >= 2) {\n        playlog.shift();\n      }\n      if (typeof data === \"object\" && 'result' in data) {\n        playlog.push(data.result);\n\n        // CSVデータを送信（平均値を含む）\n        const timestamp = new Date().toISOString();\n        const csvData = {\n          timestamp: timestamp,\n          value: data.result,\n          audioPosition: audioPositions[data.result] || 0,\n          meanValue: data.meanValue\n        };\n        socket.emit('saveData', csvData);\n\n        // プレイリストから次の曲を再生\n        playNextInPlaylist(data.result);\n      }\n    });\n    return () => {\n      socket.off(\"connect\");\n      socket.off(\"connect_error\");\n      socket.off(\"data\");\n    };\n  }, [currentPlaylistIndex]); // currentPlaylistIndexを依存配列に追加\n\n  useEffect(() => {\n    if (playing && audioRef.current) {\n      audioRef.current.volume = NORMALIZED_VOLUME;\n      audioRef.current.play().catch(error => {\n        console.error(\"Failed to play audio:\", error);\n      });\n    } else if (audioRef.current) {\n      audioRef.current.pause();\n    }\n  }, [playing, currentAudio]);\n  const handleAudioEnded = () => {\n    // 音楽が終了したら、再生位置を0にリセットして再生を開始\n    if (audioRef.current && currentMusicId !== null) {\n      audioRef.current.currentTime = 0;\n      audioPositions[currentMusicId] = 0;\n      setCurrentTime(0);\n      audioRef.current.play().catch(error => {\n        console.error(\"Failed to replay audio:\", error);\n      });\n    }\n  };\n  const handlePlayButtonClick = () => {\n    if (audioRef.current) {\n      audioRef.current.volume = NORMALIZED_VOLUME;\n      audioRef.current.play().catch(error => {\n        console.error(\"Failed to play audio:\", error);\n      });\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: /*#__PURE__*/_jsxDEV(\"header\", {\n      className: \"App-header\",\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"\\u4FE1\\u53F7\\u306B\\u3088\\u308B\\u753B\\u50CF\\u3068BGM\\u306E\\u5207\\u308A\\u66FF\\u3048\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 159,\n        columnNumber: 17\n      }, this), currentImage && /*#__PURE__*/_jsxDEV(\"img\", {\n        src: currentImage,\n        alt: \"Current\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 160,\n        columnNumber: 34\n      }, this), currentAudio && /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: [/*#__PURE__*/_jsxDEV(\"audio\", {\n          ref: audioRef,\n          src: currentAudio,\n          onEnded: handleAudioEnded,\n          onTimeUpdate: handleTimeUpdate,\n          onLoadedMetadata: handleLoadedMetadata,\n          children: \"\\u304A\\u4F7F\\u3044\\u306E\\u30D6\\u30E9\\u30A6\\u30B6\\u306F\\u30AA\\u30FC\\u30C7\\u30A3\\u30AA\\u30BF\\u30B0\\u3092\\u30B5\\u30DD\\u30FC\\u30C8\\u3057\\u3066\\u3044\\u307E\\u305B\\u3093\\u3002\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 163,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"audio-controls\",\n          children: [/*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: handlePlayButtonClick,\n            children: \"\\u518D\\u751F\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 173,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"time-display\",\n            children: [/*#__PURE__*/_jsxDEV(\"span\", {\n              children: formatTime(currentTime)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 175,\n              columnNumber: 33\n            }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n              children: \" / \"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 176,\n              columnNumber: 33\n            }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n              children: formatTime(duration)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 177,\n              columnNumber: 33\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 174,\n            columnNumber: 29\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 172,\n          columnNumber: 25\n        }, this)]\n      }, void 0, true)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 158,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 157,\n    columnNumber: 9\n  }, this);\n}\n_s(App, \"RIt7TSLFzmumBsFbdQbrJoyr/iI=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useEffect","useRef","io","jsxDEV","_jsxDEV","Fragment","_Fragment","socket","playlog","audioPositions","MUSIC_LISTS","audio","image","NORMALIZED_VOLUME","App","_s","currentImage","setCurrentImage","currentAudio","setCurrentAudio","playing","setPlaying","currentMusicId","setCurrentMusicId","currentPlaylistIndex","setCurrentPlaylistIndex","currentTime","setCurrentTime","duration","setDuration","audioRef","formatTime","timeInSeconds","minutes","Math","floor","seconds","toString","padStart","handleTimeUpdate","current","handleLoadedMetadata","play","catch","error","console","playNextInPlaylist","data","playlist","currentTrack","pause","prevIndex","length","on","log","shift","push","result","timestamp","Date","toISOString","csvData","value","audioPosition","meanValue","emit","off","volume","handleAudioEnded","handlePlayButtonClick","className","children","fileName","_jsxFileName","lineNumber","columnNumber","src","alt","ref","onEnded","onTimeUpdate","onLoadedMetadata","onClick","_c","$RefreshReg$"],"sources":["C:/Users/sato2/OneDrive/ドキュメント/soundserver/client/src/App.js"],"sourcesContent":["import React, { useState, useEffect, useRef } from \"react\";\nimport io from \"socket.io-client\";\nimport \"./App.css\";\n\nconst socket = io(\"http://192.168.10.2:3001\");\n\nconst playlog = [];\n// 各音楽の再生位置を保存\nconst audioPositions = {\n    0: 0,\n    1: 0,\n    2: 0\n};\n\n// 音楽リストの定義\nconst MUSIC_LISTS = {\n    0: [\n        { audio: \"/くるみ.mp3\", image: \"/number5.jpg\" },\n        { audio: \"/アリア.mp3\", image: \"/表示画像6.jpg\" },\n        { audio: \"/gline.mp3\", image: \"/jupitor.jpg\" }\n    ],\n    1: [\n        { audio: \"/アリア.mp3\", image: \"/表示画像6.jpg\" },\n        { audio: \"/gline.mp3\", image: \"/jupitor.jpg\" },\n        { audio: \"/くるみ.mp3\", image: \"/number5.jpg\" }\n    ],\n    2: [\n        { audio: \"/gline.mp3\", image: \"/jupitor.jpg\" },\n        { audio: \"/くるみ.mp3\", image: \"/number5.jpg\" },\n        { audio: \"/アリア.mp3\", image: \"/表示画像6.jpg\" }\n    ]\n};\n\n// 音量の統一設定\nconst NORMALIZED_VOLUME = 0.5;\n\nfunction App() {\n    const [currentImage, setCurrentImage] = useState(\"\");\n    const [currentAudio, setCurrentAudio] = useState(\"\");\n    const [playing, setPlaying] = useState(false);\n    const [currentMusicId, setCurrentMusicId] = useState(null);\n    const [currentPlaylistIndex, setCurrentPlaylistIndex] = useState(0);\n    const [currentTime, setCurrentTime] = useState(0);\n    const [duration, setDuration] = useState(0);\n    const audioRef = useRef(null);\n\n    const formatTime = (timeInSeconds) => {\n        const minutes = Math.floor(timeInSeconds / 60);\n        const seconds = Math.floor(timeInSeconds % 60);\n        return `${minutes}:${seconds.toString().padStart(2, '0')}`;\n    };\n\n    const handleTimeUpdate = () => {\n        if (audioRef.current) {\n            setCurrentTime(audioRef.current.currentTime);\n        }\n    };\n\n    const handleLoadedMetadata = () => {\n        if (audioRef.current) {\n            setDuration(audioRef.current.duration);\n            audioRef.current.currentTime = audioPositions[currentMusicId] || 0;\n            audioRef.current.play().catch(error => {\n                console.error(\"Failed to play audio:\", error);\n            });\n        }\n    };\n\n    function playNextInPlaylist(data) {\n        const playlist = MUSIC_LISTS[data];\n        const currentTrack = playlist[currentPlaylistIndex];\n        \n        if (audioRef.current) {\n            audioPositions[currentMusicId] = audioRef.current.currentTime;\n            audioRef.current.pause();\n        }\n\n        setCurrentImage(currentTrack.image);\n        setCurrentAudio(currentTrack.audio);\n        setCurrentMusicId(data);\n        setPlaying(true);\n\n        // 次の曲のインデックスを設定（プレイリストの最後なら最初に戻る）\n        setCurrentPlaylistIndex((prevIndex) => \n            prevIndex + 1 >= playlist.length ? 0 : prevIndex + 1\n        );\n    }\n\n    useEffect(() => {\n        socket.on(\"connect\", () => {\n            console.log(\"Connected to server\");\n        });\n        socket.on(\"connect_error\", (error) => {\n            console.error(\"Failed to connect to server\", error);\n        });\n        socket.on(\"data\", (data) => {\n            if (playlog.length >= 2) {\n                playlog.shift();\n            }\n            if (typeof(data) === \"object\" && 'result' in data) {\n                playlog.push(data.result);\n                \n                // CSVデータを送信（平均値を含む）\n                const timestamp = new Date().toISOString();\n                const csvData = {\n                    timestamp: timestamp,\n                    value: data.result,\n                    audioPosition: audioPositions[data.result] || 0,\n                    meanValue: data.meanValue\n                };\n                socket.emit('saveData', csvData);\n\n                // プレイリストから次の曲を再生\n                playNextInPlaylist(data.result);\n            }\n        });\n        return () => {\n            socket.off(\"connect\");\n            socket.off(\"connect_error\");\n            socket.off(\"data\");\n        };\n    }, [currentPlaylistIndex]); // currentPlaylistIndexを依存配列に追加\n\n    useEffect(() => {\n        if (playing && audioRef.current) {\n            audioRef.current.volume = NORMALIZED_VOLUME;\n            audioRef.current.play().catch(error => {\n                console.error(\"Failed to play audio:\", error);\n            });\n        } else if (audioRef.current) {\n            audioRef.current.pause();\n        }\n    }, [playing, currentAudio]);\n\n    const handleAudioEnded = () => {\n        // 音楽が終了したら、再生位置を0にリセットして再生を開始\n        if (audioRef.current && currentMusicId !== null) {\n            audioRef.current.currentTime = 0;\n            audioPositions[currentMusicId] = 0;\n            setCurrentTime(0);\n            audioRef.current.play().catch(error => {\n                console.error(\"Failed to replay audio:\", error);\n            });\n        }\n    };\n\n    const handlePlayButtonClick = () => {\n        if (audioRef.current) {\n            audioRef.current.volume = NORMALIZED_VOLUME;\n            audioRef.current.play().catch(error => {\n                console.error(\"Failed to play audio:\", error);\n            });\n        }\n    };\n\n    return (\n        <div className=\"App\">\n            <header className=\"App-header\">\n                <h1>信号による画像とBGMの切り替え</h1>\n                {currentImage && <img src={currentImage} alt=\"Current\" />}\n                {currentAudio && (\n                    <>\n                        <audio\n                            ref={audioRef}\n                            src={currentAudio}\n                            onEnded={handleAudioEnded}\n                            onTimeUpdate={handleTimeUpdate}\n                            onLoadedMetadata={handleLoadedMetadata}\n                        >\n                            お使いのブラウザはオーディオタグをサポートしていません。\n                        </audio>\n                        <div className=\"audio-controls\">\n                            <button onClick={handlePlayButtonClick}>再生</button>\n                            <div className=\"time-display\">\n                                <span>{formatTime(currentTime)}</span>\n                                <span> / </span>\n                                <span>{formatTime(duration)}</span>\n                            </div>\n                        </div>\n                    </>\n                )}\n            </header>\n        </div>\n    );\n}\n\nexport default App;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}