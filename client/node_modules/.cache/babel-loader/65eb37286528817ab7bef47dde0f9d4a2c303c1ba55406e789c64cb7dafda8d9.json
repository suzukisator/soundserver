{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\sato2\\\\OneDrive\\\\\\u30C9\\u30AD\\u30E5\\u30E1\\u30F3\\u30C8\\\\soundserver\\\\client\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useRef } from \"react\";\nimport io from \"socket.io-client\";\nimport \"./App.css\";\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst socket = io(\"http://192.168.10.2:3001\");\nconst playlog = [];\n// 各音楽の再生位置を保存\nconst audioPositions = {\n  0: 0,\n  1: 0,\n  2: 0\n};\nconst music0 = \"/くるみ.mp3\";\nconst music1 = \"/アリア.mp3\";\nconst music2 = \"/gline.mp3\";\nconst IMAGE0 = \"/number5.jpg\";\nconst IMAGE1 = \"/表示画像6.jpg\";\nconst IMAGE2 = \"/jupitor.jpg\";\n\n// 音量の統一設定\nconst NORMALIZED_VOLUME = 0.5;\nfunction App() {\n  _s();\n  const [currentImage, setCurrentImage] = useState(\"\");\n  const [currentAudio, setCurrentAudio] = useState(\"\");\n  const [playing, setPlaying] = useState(false);\n  const audioRef = useRef(null);\n  function audioCheck(data, music, image) {\n    if (audioRef.current) {\n      // 現在の再生位置を保存\n      audioPositions[playlog[0]] = audioRef.current.currentTime;\n      audioRef.current.pause();\n    }\n    if (playlog.length === 1) {\n      console.log(`${data}の曲だけ`);\n      setCurrentImage(image);\n      setCurrentAudio(music);\n      setPlaying(true);\n    } else if (playlog[0] === data && playlog[1] === data) {\n      console.log(`${data}の曲を続けて再生`);\n      if (audioRef.current) {\n        if (audioRef.current.paused) {\n          audioRef.current.play().catch(error => {\n            console.error(\"Failed to play audio:\", error);\n          });\n        } else {\n          console.log(\"音楽は既に再生中です\");\n        }\n      }\n    } else if (playlog[0] !== data && playlog[1] === data) {\n      console.log(`${data}の曲を再生`);\n      setCurrentImage(image);\n      setCurrentAudio(music);\n      setPlaying(true);\n    }\n    if (audioRef.current) {\n      audioRef.current.load();\n      // 音量を設定\n      audioRef.current.volume = NORMALIZED_VOLUME;\n      // 保存された再生位置から再開\n      audioRef.current.addEventListener('loadedmetadata', () => {\n        audioRef.current.currentTime = audioPositions[data];\n        audioRef.current.play().catch(error => {\n          console.error(\"Failed to play audio:\", error);\n        });\n      });\n    }\n  }\n  useEffect(() => {\n    socket.on(\"connect\", () => {\n      console.log(\"Connected to server\");\n    });\n    socket.on(\"connect_error\", error => {\n      console.error(\"Failed to connect to server\", error);\n    });\n    socket.on(\"data\", data => {\n      if (playlog.length >= 2) {\n        playlog.shift();\n      }\n      if (typeof data === \"number\") {\n        playlog.push(data);\n\n        // CSVデータを送信\n        const timestamp = new Date().toISOString();\n        const csvData = {\n          timestamp: timestamp,\n          value: data,\n          audioPosition: audioPositions[data] || 0\n        };\n        socket.emit('saveData', csvData);\n      }\n      console.log(\"playlog:\", playlog);\n      switch (data) {\n        case 0:\n          audioCheck(data, music0, IMAGE0);\n          break;\n        case 1:\n          audioCheck(data, music1, IMAGE1);\n          break;\n        case 2:\n          audioCheck(data, music2, IMAGE2);\n          break;\n        default:\n          console.log(data);\n          break;\n      }\n    });\n    return () => {\n      socket.off(\"connect\");\n      socket.off(\"connect_error\");\n      socket.off(\"data\");\n    };\n  }, []);\n  useEffect(() => {\n    if (playing && audioRef.current) {\n      audioRef.current.volume = NORMALIZED_VOLUME;\n      audioRef.current.play().catch(error => {\n        console.error(\"Failed to play audio:\", error);\n      });\n    } else if (audioRef.current) {\n      audioRef.current.pause();\n    }\n  }, [playing, currentAudio]);\n  const handleAudioEnded = () => {\n    setPlaying(false);\n  };\n  const handlePlayButtonClick = () => {\n    if (audioRef.current) {\n      audioRef.current.volume = NORMALIZED_VOLUME;\n      audioRef.current.play().catch(error => {\n        console.error(\"Failed to play audio:\", error);\n      });\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: /*#__PURE__*/_jsxDEV(\"header\", {\n      className: \"App-header\",\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"\\u4FE1\\u53F7\\u306B\\u3088\\u308B\\u753B\\u50CF\\u3068BGM\\u306E\\u5207\\u308A\\u66FF\\u3048\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 149,\n        columnNumber: 4\n      }, this), currentImage && /*#__PURE__*/_jsxDEV(\"img\", {\n        src: currentImage,\n        alt: \"Current\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 150,\n        columnNumber: 21\n      }, this), currentAudio && /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: [/*#__PURE__*/_jsxDEV(\"audio\", {\n          ref: audioRef,\n          src: currentAudio,\n          onEnded: handleAudioEnded,\n          children: \"\\u304A\\u4F7F\\u3044\\u306E\\u30D6\\u30E9\\u30A6\\u30B6\\u306F\\u30AA\\u30FC\\u30C7\\u30A3\\u30AA\\u30BF\\u30B0\\u3092\\u30B5\\u30DD\\u30FC\\u30C8\\u3057\\u3066\\u3044\\u307E\\u305B\\u3093\\u3002\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 153,\n          columnNumber: 5\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: handlePlayButtonClick,\n          children: \"\\u518D\\u751F\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 160,\n          columnNumber: 5\n        }, this)]\n      }, void 0, true)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 148,\n      columnNumber: 5\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 147,\n    columnNumber: 3\n  }, this);\n}\n_s(App, \"eNrY36/Fc+E7yviItfRFaKrzsZI=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useEffect","useRef","io","jsxDEV","_jsxDEV","Fragment","_Fragment","socket","playlog","audioPositions","music0","music1","music2","IMAGE0","IMAGE1","IMAGE2","NORMALIZED_VOLUME","App","_s","currentImage","setCurrentImage","currentAudio","setCurrentAudio","playing","setPlaying","audioRef","audioCheck","data","music","image","current","currentTime","pause","length","console","log","paused","play","catch","error","load","volume","addEventListener","on","shift","push","timestamp","Date","toISOString","csvData","value","audioPosition","emit","off","handleAudioEnded","handlePlayButtonClick","className","children","fileName","_jsxFileName","lineNumber","columnNumber","src","alt","ref","onEnded","onClick","_c","$RefreshReg$"],"sources":["C:/Users/sato2/OneDrive/ドキュメント/soundserver/client/src/App.js"],"sourcesContent":["import React, { useState, useEffect, useRef } from \"react\";\nimport io from \"socket.io-client\";\nimport \"./App.css\";\n\nconst socket = io(\"http://192.168.10.2:3001\");\n\nconst playlog = [];\n// 各音楽の再生位置を保存\nconst audioPositions = {\n    0: 0,\n    1: 0,\n    2: 0\n};\n\nconst music0 = \"/くるみ.mp3\";\nconst music1 = \"/アリア.mp3\";\nconst music2 = \"/gline.mp3\";\n\nconst IMAGE0 = \"/number5.jpg\";\nconst IMAGE1 = \"/表示画像6.jpg\";\nconst IMAGE2 = \"/jupitor.jpg\";\n\n// 音量の統一設定\nconst NORMALIZED_VOLUME = 0.5;\n\nfunction App() {\n\tconst [ currentImage, setCurrentImage ] = useState(\"\");\n\tconst [ currentAudio, setCurrentAudio ] = useState(\"\");\n    const [ playing, setPlaying ] = useState(false);\n    const audioRef = useRef(null);\n\n    function audioCheck(data, music, image) {\n        if (audioRef.current) {\n            // 現在の再生位置を保存\n            audioPositions[playlog[0]] = audioRef.current.currentTime;\n            audioRef.current.pause();\n        }\n\n        if (playlog.length === 1) {\n            console.log(`${data}の曲だけ`);\n            setCurrentImage(image);\n            setCurrentAudio(music);\n            setPlaying(true);\n        } else if (playlog[0] === data && playlog[1] === data) {\n            console.log(`${data}の曲を続けて再生`);\n            if (audioRef.current) {\n                if (audioRef.current.paused) {\n                    audioRef.current.play().catch(error => {\n                        console.error(\"Failed to play audio:\", error);\n                    });\n                } else {\n                    console.log(\"音楽は既に再生中です\");\n                }\n            }\n        } else if (playlog[0] !== data && playlog[1] === data) {\n            console.log(`${data}の曲を再生`);\n            setCurrentImage(image);\n            setCurrentAudio(music);\n            setPlaying(true);\n        }\n\n        if (audioRef.current) {\n            audioRef.current.load();\n            // 音量を設定\n            audioRef.current.volume = NORMALIZED_VOLUME;\n            // 保存された再生位置から再開\n            audioRef.current.addEventListener('loadedmetadata', () => {\n                audioRef.current.currentTime = audioPositions[data];\n                audioRef.current.play().catch(error => {\n                    console.error(\"Failed to play audio:\", error);\n                });\n            });\n        }\n    }\n\n    useEffect(() => {\n        socket.on(\"connect\", () => {\n            console.log(\"Connected to server\");\n        });\n        socket.on(\"connect_error\", (error) => {\n            console.error(\"Failed to connect to server\", error);\n        });\n        socket.on(\"data\", (data) => {\n            if (playlog.length >= 2) {\n                playlog.shift();\n            }\n            if (typeof(data) === \"number\") {\n                playlog.push(data);\n                \n                // CSVデータを送信\n                const timestamp = new Date().toISOString();\n                const csvData = {\n                    timestamp: timestamp,\n                    value: data,\n                    audioPosition: audioPositions[data] || 0\n                };\n                socket.emit('saveData', csvData);\n            }\n            console.log(\"playlog:\", playlog);\n            switch (data) {\n                case 0:\n                    audioCheck(data, music0, IMAGE0);\n                    break;\n                case 1:\n                    audioCheck(data, music1, IMAGE1);\n                    break;\n\t\t\t\tcase 2:\n\t\t\t\t\taudioCheck(data, music2, IMAGE2);\n\t\t\t\t\tbreak;\n                default:\n                    console.log(data);\n                    break;\n            }\n        });\n        return () => {\n            socket.off(\"connect\");\n            socket.off(\"connect_error\");\n            socket.off(\"data\");\n        };\n    }, []);\n\n    useEffect(() => {\n        if (playing && audioRef.current) {\n            audioRef.current.volume = NORMALIZED_VOLUME;\n            audioRef.current.play().catch(error => {\n                console.error(\"Failed to play audio:\", error);\n            });\n        } else if (audioRef.current) {\n            audioRef.current.pause();\n        }\n    }, [playing, currentAudio]);\n\n    const handleAudioEnded = () => {\n        setPlaying(false);\n    };\n\n\tconst handlePlayButtonClick = () => {\n\t\tif (audioRef.current) {\n\t\t  audioRef.current.volume = NORMALIZED_VOLUME;\n\t\t  audioRef.current.play().catch(error => {\n\t\t\tconsole.error(\"Failed to play audio:\", error);\n\t\t  });\n\t\t}\n\t};\n\n\treturn (\n\t\t<div className=\"App\">\n\t\t  <header className=\"App-header\">\n\t\t\t<h1>信号による画像とBGMの切り替え</h1>\n\t\t\t{currentImage && <img src={currentImage} alt=\"Current\" />}\n\t\t\t{currentAudio && (\n\t\t\t  <>\n\t\t\t\t<audio\n\t\t\t\t  ref={audioRef}\n\t\t\t\t  src={currentAudio}\n\t\t\t\t  onEnded={handleAudioEnded}\n\t\t\t\t>\n\t\t\t\t  お使いのブラウザはオーディオタグをサポートしていません。\n\t\t\t\t</audio>\n\t\t\t\t<button onClick={handlePlayButtonClick}>再生</button>\n\t\t\t  </>\n\t\t\t)}\n\t\t  </header>\n\t\t</div>\n    );\n}\n\nexport default App;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}